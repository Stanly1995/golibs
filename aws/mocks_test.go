// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package aws is a generated GoMock package.
package aws_service

import (
	context "context"
	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockiS3Client is a mock of s3Client interface
type MockiS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockiS3ClientMockRecorder
}

// MockiS3ClientMockRecorder is the mock recorder for MockiS3Client
type MockiS3ClientMockRecorder struct {
	mock *MockiS3Client
}

// NewMockiS3Client creates a new mock instance
func NewMockiS3Client(ctrl *gomock.Controller) *MockiS3Client {
	mock := &MockiS3Client{ctrl: ctrl}
	mock.recorder = &MockiS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockiS3Client) EXPECT() *MockiS3ClientMockRecorder {
	return m.recorder
}

// PutObjectWithContext mocks base method
func (m *MockiS3Client) PutObjectWithContext(ctx context.Context, input *s3.PutObjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectWithContext", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObjectWithContext indicates an expected call of PutObjectWithContext
func (mr *MockiS3ClientMockRecorder) PutObjectWithContext(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectWithContext", reflect.TypeOf((*MockiS3Client)(nil).PutObjectWithContext), ctx, input)
}

// PutBucketPolicy mocks base method
func (m *MockiS3Client) PutBucketPolicy(input *s3.PutBucketPolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketPolicy", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBucketPolicy indicates an expected call of PutBucketPolicy
func (mr *MockiS3ClientMockRecorder) PutBucketPolicy(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketPolicy", reflect.TypeOf((*MockiS3Client)(nil).PutBucketPolicy), input)
}

// MockiGenerate is a mock of dataGenerate interface
type MockiGenerate struct {
	ctrl     *gomock.Controller
	recorder *MockiGenerateMockRecorder
}

// MockiGenerateMockRecorder is the mock recorder for MockiGenerate
type MockiGenerateMockRecorder struct {
	mock *MockiGenerate
}

// NewMockiGenerate creates a new mock instance
func NewMockiGenerate(ctrl *gomock.Controller) *MockiGenerate {
	mock := &MockiGenerate{ctrl: ctrl}
	mock.recorder = &MockiGenerateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockiGenerate) EXPECT() *MockiGenerateMockRecorder {
	return m.recorder
}

// GenerateTime mocks base method
func (m *MockiGenerate) GenerateTime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTime")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateTime indicates an expected call of GenerateTime
func (mr *MockiGenerateMockRecorder) GenerateTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTime", reflect.TypeOf((*MockiGenerate)(nil).GenerateTime))
}

// GenerateUUID mocks base method
func (m *MockiGenerate) GenerateUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateUUID indicates an expected call of GenerateUUID
func (mr *MockiGenerateMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockiGenerate)(nil).GenerateUUID))
}
